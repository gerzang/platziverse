{"version":3,"sources":["agent-ts.js"],"names":["test","require","proxyquire","sinon","agentFixtures","config","logging","MetricStub","belongsTo","spy","single","Object","assign","id","AgentStub","db","sandbox","beforeEach","hasMany","findById","stub","withArgs","returns","Promise","resolve","byId","setUpDatabase","afterEach","restore","t","truthy","Agent","serial","true","called","calledWith","agent","calledOnce","deepEqual"],"mappings":"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","file":"agent-ts.js","sourcesContent":["'use strict'\r\n\r\nconst test = require('ava')\r\nconst proxyquire = require('proxyquire')\r\nconst sinon = require('sinon')\r\n\r\nconst agentFixtures = require('./fixtures/agent')\r\n\r\nlet config = {\r\n  logging: function () {\r\n  }\r\n}\r\nlet MetricStub = {\r\n  belongsTo: sinon.spy()\r\n}\r\n\r\nlet single = Object.assign({}, agentFixtures.single)\r\nlet id = 1\r\nlet AgentStub = null\r\nlet db = null\r\nlet sandbox = null\r\n\r\ntest.beforeEach(async () => {\r\n  sandbox = sinon.sandbox\r\n  AgentStub = {\r\n    hasMany: sandbox.spy()\r\n  }\r\n\r\n  // model findByID\r\n  AgentStub.findById = sandbox.stub()\r\n  AgentStub.findById.withArgs(id).returns(Promise.resolve(agentFixtures.byId(id)))\r\n  const setUpDatabase = proxyquire('../', {\r\n    './models/agent': () => AgentStub,\r\n    './models/metric': () => MetricStub\r\n  })\r\n  db = await setUpDatabase(config)\r\n})\r\n\r\ntest.afterEach(() => {\r\n  sandbox && sandbox.restore()\r\n})\r\ntest('Agent', t => {\r\n  t.truthy(db.Agent, 'Agent servoce shuld exist')\r\n})\r\n\r\ntest.serial('Setup', t => {\r\n  t.true(AgentStub.hasMany.called, 'AgentModel.hasmany  was executed')\r\n  t.true(AgentStub.hasMany.calledWith(MetricStub), 'Argument should be the MetricModel')\r\n  t.true(MetricStub.belongsTo.called, 'MetricModel.belongsTo was executed')\r\n  t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argument should be the AgentModel')\r\n})\r\n\r\ntest.serial('Agent#findById', async t => {\r\n  let agent = await db.Agent.findById(id)\r\n\r\n  t.true(AgentStub.findById.called, 'findById should be called on model')\r\n  t.true(AgentStub.findById.calledOnce, 'findById should be called once')\r\n  t.true(AgentStub.findById.calledWith(id), 'findById should be called with specified id')\r\n\r\n\r\n  t.deepEqual(agent, agentFixtures.byId(id), 'should be the same')\r\n})\r\n"]}