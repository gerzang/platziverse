{"version":3,"sources":["agent-ts.js"],"names":["test","require","proxyquire","sinon","config","logging","MetricStub","belongsTo","spy","AgentStub","db","sandbox","beforeEach","create","Sandbox","hasMany","setUpDatabase","afterEach","restore","t","truthy","Agent","serial","true","called"],"mappings":"AAAA;;;;;AAEA,MAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,MAAMC,aAAaD,QAAQ,YAAR,CAAnB;AACA,MAAME,QAAQF,QAAQ,OAAR,CAAd;;AAEA,IAAIG,SAAS;AACXC,WAAS,YAAY,CACpB;AAFU,CAAb;AAIA,IAAIC,aAAa;AACfC,aAAWJ,MAAMK,GAAN;AADI,CAAjB;;AAIA,IAAIC,YAAY,IAAhB;AACA,IAAIC,KAAK,IAAT;AACA,IAAIC,UAAU,IAAd;;AAEAX,KAAKY,UAAL,CAAgB,YAAY;AAC1BD,YAAUR,MAAMU,MAAN,CAAaC,OAAb,EAAV;AACAL,cAAY;AACVM,aAASJ,QAAQH,GAAR;AADC,GAAZ;AAGA,QAAMQ,gBAAgBd,WAAW,KAAX,EAAkB;AACtC,sBAAkB,MAAMO,SADc;AAEtC,uBAAmB,MAAMH;AAFa,GAAlB,CAAtB;AAIAI,OAAK,MAAMM,cAAcZ,MAAd,CAAX;AACD,CAVD;;AAYAJ,KAAKiB,SAAL,CAAe,MAAM;AACnB,MAAIN,OAAJ,EAAaR,MAAMQ,OAAN,CAAcO,OAAd;AACd,CAFD;;AAIAlB,KAAK,OAAL,EAAcmB,KAAK;AAAA;;AACjBA,IAAEC,MAAF,uBAAS,qCAAGC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAmB,2BAAnB;AACD,CAFD;;AAIArB,KAAKsB,MAAL,CAAY,OAAZ,EAAqBH,KAAK;AAAA;AAAA;;AACxBA,IAAEI,IAAF,yBAAO,gEAAUR,OAAV,wBAAkBS,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiC,kCAAjC;AACAL,IAAEI,IAAF,yBAAO,iEAAWhB,SAAX,wBAAqBiB,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAoC,oCAApC;AACD,CAHD","file":"agent-ts.js","sourcesContent":["'use strict'\r\n\r\nconst test = require('ava')\r\nconst proxyquire = require('proxyquire')\r\nconst sinon = require('sinon')\r\n\r\nlet config = {\r\n  logging: function () {\r\n  }\r\n}\r\nlet MetricStub = {\r\n  belongsTo: sinon.spy()\r\n}\r\n\r\nlet AgentStub = null\r\nlet db = null\r\nlet sandbox = null\r\n\r\ntest.beforeEach(async () => {\r\n  sandbox = sinon.create.Sandbox()\r\n  AgentStub = {\r\n    hasMany: sandbox.spy()\r\n  }\r\n  const setUpDatabase = proxyquire('../', {\r\n    './models/agent': () => AgentStub,\r\n    './models/metric': () => MetricStub\r\n  })\r\n  db = await setUpDatabase(config)\r\n})\r\n\r\ntest.afterEach(() => {\r\n  if (sandbox) sinon.sandbox.restore()\r\n})\r\n\r\ntest('Agent', t => {\r\n  t.truthy(db.Agent, 'Agent servoce shuld exist')\r\n})\r\n\r\ntest.serial('Setup', t => {\r\n  t.true(AgentStub.hasMany.called, 'AgentModel.hasmany  was executed')\r\n  t.true(MetricStub.belongsTo.called, 'MetricModel.belongsTo was executed')\r\n})\r\n"]}