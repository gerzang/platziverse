{"version":3,"sources":["agent-ts.js"],"names":["test","require","proxyquire","sinon","agentFixtures","config","logging","MetricStub","belongsTo","spy","single","Object","assign","id","AgentStub","db","sandbox","beforeEach","create","hasMany","findById","stub","withArgs","returns","Promise","resolve","byId","setUpDatabase","afterEach","restore","t","truthy","Agent","serial","true","called","calledWith","agent","deepEqual"],"mappings":"AAAA;;;;;AAEA,MAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,MAAMC,aAAaD,QAAQ,YAAR,CAAnB;AACA,MAAME,QAAQF,QAAQ,OAAR,CAAd;;AAEA,MAAMG,gBAAgBH,QAAQ,kBAAR,CAAtB;;AAEA,IAAII,SAAS;AACXC,WAAS,YAAY,CACpB;AAFU,CAAb;AAIA,IAAIC,aAAa;AACfC,aAAWL,MAAMM,GAAN;AADI,CAAjB;;AAIA,IAAIC,SAASC,OAAOC,MAAP,CAAc,EAAd,EAAkBR,cAAcM,MAAhC,CAAb;AACA,IAAIG,KAAK,CAAT;AACA,IAAIC,YAAY,IAAhB;AACA,IAAIC,KAAK,IAAT;AACA,IAAIC,UAAU,IAAd;;AAEAhB,KAAKiB,UAAL,CAAgB,YAAY;AAC1BD,YAAUb,MAAMa,OAAN,CAAcE,MAAd,EAAV;AACAJ,cAAY;AACVK,aAASH,QAAQP,GAAR;;AAGX;AAJY,GAAZ,CAKAK,UAAUM,QAAV,GAAqBJ,QAAQK,IAAR,EAArB;AACAP,YAAUM,QAAV,CAAmBE,QAAnB,CAA4BT,EAA5B,EAAgCU,OAAhC,CAAwCC,QAAQC,OAAR,CAAgBrB,cAAcsB,IAAd,CAAmBb,EAAnB,CAAhB,CAAxC;AACA,QAAMc,gBAAgBzB,WAAW,KAAX,EAAkB;AACtC,sBAAkB,MAAMY,SADc;AAEtC,uBAAmB,MAAMP;AAFa,GAAlB,CAAtB;AAIAQ,OAAK,MAAMY,cAActB,MAAd,CAAX;AACD,CAdD;;AAgBAL,KAAK4B,SAAL,CAAe,MAAM;AACnBZ,aAAWA,QAAQa,OAAR,EAAX;AACD,CAFD;AAGA7B,KAAK,OAAL,EAAc8B,KAAK;AAAA;;AACjBA,IAAEC,MAAF,uBAAS,qCAAGC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAmB,2BAAnB;AACD,CAFD;;AAIAhC,KAAKiC,MAAL,CAAY,OAAZ,EAAqBH,KAAK;AAAA;AAAA;AAAA;AAAA;;AACxBA,IAAEI,IAAF,yBAAO,gEAAUf,OAAV,wBAAkBgB,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiC,kCAAjC;AACAL,IAAEI,IAAF,yBAAO,uEAAUf,OAAV,+BAAkBiB,UAAlB,aAA6B7B,UAA7B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiD,oCAAjD;AACAuB,IAAEI,IAAF,yBAAO,iEAAW1B,SAAX,wBAAqB2B,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAoC,oCAApC;AACAL,IAAEI,IAAF,yBAAO,wEAAW1B,SAAX,+BAAqB4B,UAArB,aAAgCtB,SAAhC,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAmD,mCAAnD;AACD,CALD;;AAOAd,KAAKiC,MAAL,CAAY,gBAAZ,EAA8B,MAAMH,CAAN,IAAW;AACvC,MAAIO,QAAQ,MAAMtB,GAAGiB,KAAH,CAASZ,QAAT,CAAkBP,EAAlB,CAAlB;;AAEAiB,IAAEQ,SAAF,CAAYD,KAAZ,EAAmBjC,cAAcsB,IAAd,CAAmBb,EAAnB,CAAnB,EAA2C,oBAA3C;AACD,CAJD","file":"agent-ts.js","sourcesContent":["'use strict'\r\n\r\nconst test = require('ava')\r\nconst proxyquire = require('proxyquire')\r\nconst sinon = require('sinon')\r\n\r\nconst agentFixtures = require('./fixtures/agent')\r\n\r\nlet config = {\r\n  logging: function () {\r\n  }\r\n}\r\nlet MetricStub = {\r\n  belongsTo: sinon.spy()\r\n}\r\n\r\nlet single = Object.assign({}, agentFixtures.single)\r\nlet id = 1\r\nlet AgentStub = null\r\nlet db = null\r\nlet sandbox = null\r\n\r\ntest.beforeEach(async () => {\r\n  sandbox = sinon.sandbox.create()\r\n  AgentStub = {\r\n    hasMany: sandbox.spy()\r\n  }\r\n\r\n  // model findByID\r\n  AgentStub.findById = sandbox.stub()\r\n  AgentStub.findById.withArgs(id).returns(Promise.resolve(agentFixtures.byId(id)))\r\n  const setUpDatabase = proxyquire('../', {\r\n    './models/agent': () => AgentStub,\r\n    './models/metric': () => MetricStub\r\n  })\r\n  db = await setUpDatabase(config)\r\n})\r\n\r\ntest.afterEach(() => {\r\n  sandbox && sandbox.restore()\r\n})\r\ntest('Agent', t => {\r\n  t.truthy(db.Agent, 'Agent servoce shuld exist')\r\n})\r\n\r\ntest.serial('Setup', t => {\r\n  t.true(AgentStub.hasMany.called, 'AgentModel.hasmany  was executed')\r\n  t.true(AgentStub.hasMany.calledWith(MetricStub), 'Argument should be the MetricModel')\r\n  t.true(MetricStub.belongsTo.called, 'MetricModel.belongsTo was executed')\r\n  t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argument should be the AgentModel')\r\n})\r\n\r\ntest.serial('Agent#findById', async t => {\r\n  let agent = await db.Agent.findById(id)\r\n\r\n  t.deepEqual(agent, agentFixtures.byId(id), 'should be the same')\r\n})\r\n"]}