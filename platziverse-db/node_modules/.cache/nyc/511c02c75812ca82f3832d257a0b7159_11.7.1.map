{"version":3,"sources":["metric.js"],"names":["test","require","proxyquire","sinon","agentFixtures","single","Object","assign","uuid","id","config","logging","uuidArgs","where","usernameArgs","username","connected","connectedArgs","newAgent","name","hostname","pid","MetricStub","belongsTo","spy","AgentStub","db","sandbox","beforeEach","create","hasMany","withArgs","returns","Promise","resolve","toJSON","findAll","all","platzi","findById","byId","findOne","byUuid","update","setupDatabase","afterEach","restore","t","truthy","Agent","serial","true","calledWith","called","callCount","agent","calledOnce","deepEqual","createOrUpdate","agents","findConnected","findByUsername","is","length","shift","findByUuid"],"mappings":"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","file":"metric.js","sourcesContent":["'use strict'\r\n\r\n// test\r\nconst test = require('ava')\r\n\r\n// simular los require del modulo que estamos testeando\r\nconst proxyquire = require('proxyquire')\r\n\r\n// registrar cada vez que una funcion es invocada en el codigo testado\r\nconst sinon = require('sinon')\r\n\r\n// fixtures\r\nconst agentFixtures = require('./fixtures/agent')\r\n\r\n// single\r\nlet single = Object.assign({}, agentFixtures.single)\r\nlet uuid = single.uuid\r\n\r\n// id para hacer el query de la api del model\r\nlet id = 1\r\n\r\n// objeto de configuracion\r\n// en index ya tenemos los defaults\r\nlet config = {\r\n  logging: function () {}\r\n}\r\n\r\nlet uuidArgs = {\r\n  where: { uuid }\r\n}\r\n\r\nlet usernameArgs = {\r\n  where: {\r\n    username: 'platzi',\r\n    connected: true\r\n  }\r\n}\r\n\r\nlet connectedArgs = {\r\n  where: {connected: true}\r\n}\r\n\r\nlet newAgent = {\r\n  uuid: '123-123-123',\r\n  name: 'test',\r\n  username: 'test',\r\n  hostname: 'test',\r\n  pid: 0,\r\n  connected: false\r\n}\r\n\r\n// Simulamos el model metric\r\nlet MetricStub = {\r\n  belongsTo: sinon.spy()\r\n}\r\n\r\nlet AgentStub = null\r\n\r\nlet db = null\r\n\r\nlet sandbox = null\r\n\r\ntest.beforeEach(async () => {\r\n  sandbox = sinon.sandbox.create()\r\n  AgentStub = {\r\n    hasMany: sandbox.spy()\r\n\r\n  }\r\n  // create\r\n  AgentStub.create.withArgs(newAgent).returns(Promise.resolve({\r\n    // result.toJSON en lib/agent.js\r\n    toJSON () { return newAgent }\r\n  }))\r\n\r\n  // findAll\r\n  AgentStub.findAll.withArgs().returns(Promise.resolve(agentFixtures.all))\r\n  AgentStub.findAll.withArgs(connectedArgs).returns(Promise.resolve(agentFixtures.connected))\r\n  AgentStub.findAll.withArgs(usernameArgs).returns(Promise.resolve(agentFixtures.platzi))\r\n\r\n  // Le decimos a sinon que cuando llame a findById resuelva la promesa con el mÃ©todo de agentFixtures.byId\r\n  AgentStub.findById.withArgs(id).returns(Promise.resolve(agentFixtures.byId(id)))\r\n\r\n  AgentStub.findOne.withArgs(uuidArgs).returns(Promise.resolve(agentFixtures.byUuid(uuid)))\r\n  AgentStub.update.withArgs(single, uuidArgs).returns(Promise.resolve(single))\r\n  // modulo index.js\r\n  const setupDatabase = proxyquire('../', {\r\n    './models/agent': () => AgentStub,\r\n    './models/metric': () => MetricStub\r\n  })\r\n\r\n  // Antes de cada test correomos el index.js\r\n  db = await setupDatabase(config)\r\n})\r\n\r\n// Reiniciamos valores despues de cada test\r\ntest.afterEach(() => {\r\n  sandbox && sandbox.restore()\r\n})\r\ntest('Agent', t => {\r\n  t.truthy(db.Agent, 'Agent Service Should exits')\r\n})\r\n\r\n// test en serie\r\ntest.serial('Setup', t => {\r\n  t.true(AgentStub.hasMany.calledWith(MetricStub), 'Argument Should be the model Metric')\r\n  t.true(AgentStub.hasMany.called, 'AgentModel.hasMany was executed')\r\n  t.true(MetricStub.belongsTo.called, 'MetricModel.belongsTo was executed')\r\n  t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Agent should be the argument')\r\n  t.true(AgentStub.hasMany.callCount === 1, 'Should be one')\r\n  t.true(MetricStub.belongsTo.callCount === 1, 'Should be one')\r\n})\r\n\r\ntest.serial('Agent#findById', async t => {\r\n// corre el cÃ³digo de index.js\r\n  let agent = await db.Agent.findById(id)\r\n\r\n  // db.AgentfindById debe comportarse  como AgentStub\r\n  t.true(AgentStub.findById.called, 'findById should be called')\r\n  t.true(AgentStub.findById.calledOnce, 'findById should be called once')\r\n  t.true(AgentStub.findById.calledWith(id), 'findById should be called with id')\r\n\r\n  t.deepEqual(agent, agentFixtures.byId(id), 'should be the same ')\r\n})\r\n\r\ntest.serial('Agent#createOrUpdate--exists', async t => {\r\n  let agent = await db.Agent.createOrUpdate(single)\r\n\r\n  t.true(AgentStub.findOne.called, 'Should be called')\r\n  t.true(AgentStub.findOne.callCount === 2, 'Should be called twice')\r\n  t.true(AgentStub.update.calledOnce, 'Should be called once')\r\n\r\n  t.deepEqual(agent, single, 'agent should be the same')\r\n})\r\n\r\ntest.serial('Agent#createOrUpdate--create', async t => {\r\n  let agent = await db.Agent.createOrUpdate(newAgent)\r\n\r\n  t.true(AgentStub.findOne.calledWith({\r\n    where: {uuid: newAgent.uuid}\r\n  }), 'Should be called with newAgent.uuid ')\r\n  t.true(AgentStub.findOne.calledOnce, 'Should be called once')\r\n  t.true(AgentStub.create.calledWith(newAgent), 'Should be called with newAgent')\r\n\r\n  t.deepEqual(agent, newAgent, 'Should be the same')\r\n})\r\n\r\ntest.serial('findAll#findConnected', async t => {\r\n  let agents = await db.Agent.findConnected()\r\n\r\n  t.true(AgentStub.findAll.calledOnce, 'Should be called once')\r\n  t.true(AgentStub.findAll.calledWith(connectedArgs))\r\n\r\n  t.deepEqual(agents, agentFixtures.connected)\r\n})\r\n\r\ntest.serial('findAll#findByUserName', async t => {\r\n  let agents = await db.Agent.findByUsername('platzi')\r\n  t.true(AgentStub.findAll.called, 'Should be called')\r\n  t.true(AgentStub.findAll.calledOnce, 'Should be called once')\r\n  t.true(AgentStub.findAll.calledWith(usernameArgs))\r\n\r\n  t.is(agents.length, agentFixtures.platzi.length, 'agents should be equal to agentFixtures.platzi')\r\n  t.deepEqual(agents.shift(), single, 'Should be equal to single')\r\n})\r\n\r\ntest.serial('findAll#all', async t => {\r\n  let agents = await db.Agent.findAll()\r\n\r\n  t.true(AgentStub.findAll.called, 'Shlould be called')\r\n  t.true(AgentStub.findAll.calledOnce, 'Should be called once')\r\n  t.true(AgentStub.findAll.calledWith(), 'Should be empty')\r\n\r\n  t.deepEqual(agents, agentFixtures.all, 'Should be the same')\r\n})\r\n\r\ntest.serial('findByUuid', async t => {\r\n  let agent = await db.Agent.findByUuid(uuid)\r\n\r\n  t.true(AgentStub.findOne.called, 'Should be called')\r\n  t.true(AgentStub.findOne.calledOnce, 'Should be called once')\r\n  t.true(AgentStub.findOne.calledWith(uuidArgs), 'Should be called with uuidArgs')\r\n\r\n  t.deepEqual(agent, agentFixtures.byUuid(uuid), 'Should be the same')\r\n})\r\n"]}